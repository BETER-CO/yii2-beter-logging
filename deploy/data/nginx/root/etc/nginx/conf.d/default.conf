# $chained_request_id variable allows us to utilize X-REQUEST-ID header value from the headers passed by the client
# or utilize internally per-request generated values from the nginx itself ($request_id).
# Check SC-1957 for more details.
map $http_x_request_id $chained_request_id {
    # If X-REQUEST-ID is empty use internaly generated string
    "" $request_id;

    # UUID regex, use X-REQUEST-ID from the client (real user or other webserver in the chain)
    "~*^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" $http_x_request_id;

    # hex string of length 32 is generated by nginx, so this regex is for reuse of value from another nginx webserver in the chain
    "~*^[0-9a-f]{32}$" $http_x_request_id;

    # all other patterns is ignored, internal string is used
    default $request_id;
}

upstream php-fpm {
    server yii2-beter-logging-php:9000;
}

server {
    listen       80;
    #listen  [::]:80;
    server_name  localhost;

    root /var/www/html/web;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    location ~ \.php$ {
        #try_files $uri = 404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
        fastcgi_pass php-fpm;
        fastcgi_read_timeout 3600;
        fastcgi_index index.php;
    }
}
